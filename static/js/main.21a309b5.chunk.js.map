{"version":3,"sources":["Planet.js","Film.js","Welcome.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["Planet","_this","this","climateClass","props","climate","includes","react_default","a","createElement","className","Link","to","id","visited","name","onClick","toggleVisited","Component","Film","watched","title","episode","toggleWatched","Welcome","Fragment","watchedMovies","map","movie","key","visitedPlanets","planet","Nav","App","state","planets","films","planetArray","plan","currentPlanet","find","index","indexOf","setState","film","filmArray","currentFilm","_this2","axios","then","resp","data","results","url","split","episode_id","_this3","filter","src_Nav_0","Route","exact","path","render","src_Welcome_0","_ref","match","src_Planet_0","_ref2","params","src_Film_0","Boolean","window","location","hostname","appJsx","HashRouter","src_App_0","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21a309b5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport './Planet.css'\n\nclass Planet extends Component {\n  render() {\n    const climateClass = this.props.climate.includes('arid') ? 'arid' : this.props.climate.includes('murky') ? 'murky' : this.props.climate.includes('frozen') ? 'frozen' :\n    this.props.climate.includes('tropical') ? 'tropical' : 'temperate'\n    return (\n      <div className={climateClass + \" planet\"}>\n        <Link to={'/planets/' + this.props.id}><h2 className={\"planet-name \" + (this.props.visited ? 'visited' : '')}>{this.props.name}</h2>\n        <h3>{this.props.climate}</h3></Link>\n        <button onClick={() => {this.props.toggleVisited(this)}}>{this.props.visited ? \"Whoops didn't visit that\" : \"Visited?\"}</button>\n      </div>\n\n    )\n  }\n}\n\nexport default Planet\n","import React, { Component } from 'react'\nimport './Film.css'\n\nclass Film extends Component {\n  render() {\n    // const climateClass = this.props.climate.includes('arid') ? 'arid' : this.props.climate.includes('murky') ? 'murky' : this.props.climate.includes('frozen') ? 'frozen' :\n    // this.props.climate.includes('tropical') ? 'tropical' : 'temperate'\n    return (\n      <div className={\"film\"}>\n        <h2 className={\"film-name \" + (this.props.watched ? 'watched' : '')}>{this.props.title}</h2>\n        <h3>Episode: {this.props.episode}</h3>\n        <button onClick={() => {this.props.toggleWatched(this)}}>{this.props.watched ? \"Whoops didn't watch that\" : \"Watched?\"}</button>\n      </div>\n\n    )\n  }\n}\n\nexport default Film\n","import React, { Component } from 'react'\nimport './Welcome.css'\n\nclass Welcome extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <h1>Welcome</h1>\n        <div className=\"lists\">\n          <ul><strong className=\"list-header\">Movies you've seen:</strong> {this.props.watchedMovies[0] ? this.props.watchedMovies.map(movie => <li key={movie.title}>{movie.title}</li>) : <p>none yet!</p>}</ul>\n          <ul><strong className=\"list-header\">Planets you've visited:</strong> {this.props.visitedPlanets[0] ? this.props.visitedPlanets.map(planet => <li key={planet.name}>{planet.name}</li>) : <p>none yet!</p>}</ul>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Welcome;\n","import {Link} from 'react-router-dom'\nimport React from 'react'\nimport './Nav.css'\n\nconst Nav = () => (\n  <div className='nav-container'>\n    <Link className='nav-link' to='/'>Home</Link>\n    <Link className='nav-link' to='/planets'>Planets</Link>\n    <Link className='nav-link' to='/films'>Films</Link>\n  </div>\n)\n\nexport default Nav\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport Planet from './Planet'\nimport Film from './Film'\nimport './App.css'\nimport { Route } from 'react-router-dom'\nimport Welcome from './Welcome'\nimport Nav from './Nav'\n\nclass App extends Component {\n  state = {\n    planets: [],\n    films: []\n  }\n  toggleVisited = (planet) => {\n    const planetArray = this.state.planets.map(plan => plan)\n    const currentPlanet = planetArray.find(plan => plan.name === planet.props.name)\n    currentPlanet.visited = !currentPlanet.visited\n    const index = planetArray.indexOf(planet)\n    planetArray[index] = currentPlanet\n    this.setState({planets: planetArray})\n  }\n  toggleWatched = (film) => {\n    const filmArray = this.state.films.map(movie => movie)\n    const currentFilm = filmArray.find(movie => movie.title === film.props.title)\n    currentFilm.watched = !currentFilm.watched\n    const index = filmArray.indexOf(film)\n    filmArray[index] = currentFilm\n    this.setState({films: filmArray})\n  }\n  componentDidMount() {\n    axios('https://swapi.co/api/planets')\n      .then(resp => {\n        let planetArray = resp.data.results.map(planet => ({climate: planet.climate, name:planet.name, visited: false, id: planet.url.split('/')[5]})\n      )\n      this.setState({planets: planetArray})\n    })\n    axios('https://swapi.co/api/films')\n      .then(resp => {\n        let filmArray = resp.data.results.map(film => ({title: film.title, episode: film.episode_id, watched: false}))\n        this.setState({films: filmArray})\n      })\n  }\n  render() {\n    const watchedMovies = this.state.films.filter(movie => movie.watched)\n    const visitedPlanets = this.state.planets.filter(plan => plan.visited)\n    return (\n      <div className=\"App\">\n        <Nav className=\"nav\"/>\n        <Route exact path='/' render={() => (\n            <Welcome\n              watchedMovies={watchedMovies}\n              visitedPlanets={visitedPlanets}\n              />\n          )} />\n        <Route exact path='/planets' render={({match}) => (\n          <React.Fragment>\n            <h2>Click a Planet to learn more!</h2>\n            <div className=\"planet-container\">\n              {this.state.planets[0] ? this.state.planets.map(planet => (\n                <Planet\n                  id={planet.id}\n                  toggleVisited={this.toggleVisited}\n                  key={planet.id}\n                  name={planet.name}\n                  climate={planet.climate}\n                  visited={planet.visited}/>\n              )) : 'loading...'}\n            </div>\n          </React.Fragment>\n          )} />\n        <Route path='/planets/:id' render={({match}) => (\n            <React.Fragment>\n              <Planet\n                id={match.params.id}\n                toggleVisited={this.toggleVisited}\n                key={match.params.id}\n                name={this.state.planets.find(plan => plan.id === match.params.id).name}\n                climate={this.state.planets.find(plan => plan.id === match.params.id).climate}\n                visited={this.state.planets.find(plan => plan.id === match.params.id).visited}\n              />\n            </React.Fragment>\n        )} />\n        <Route path='/films' render={() => (\n            <div className=\"film-container\">\n              {this.state.films[0] ? this.state.films.map(film => (\n                <Film toggleWatched={this.toggleWatched}\n                  key={film.episode}\n                  episode={film.episode}\n                  title={film.title}\n                  watched={film.watched}/>\n              )) : 'loading...'}\n            </div>\n          )}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nconst appJsx = (\n  <HashRouter>\n    <App />\n  </HashRouter>\n)\n\nReactDOM.render(appJsx, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}